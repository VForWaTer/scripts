}else{
wheight$`Water Height`[wheight$`Water Height` <= -34] <- -9999  # Zero-Value -55
wheight$`Water Height`[wheight$`Water Height` > -34] <- (-2105 + wheight$`Water Height`[wheight$`Water Height` > -34]) / 10
}
### Create Output data.frame
wtemp$DateTime <- format(wtemp$DateTime, "%d.%m.%Y %H:%M")
dat_wtemp <- data.frame(DateTimeUTC = wtemp$DateTime, UTCOffset = wtemp$UTCOffset, SiteID = siteid, DataValue = wtemp$`Water Temp`, VariableID = 1, CensorCode = "nc", MethodID = 10, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
ltemp$DateTime <- format(ltemp$DateTime, "%d.%m.%Y %H:%M")
dat_ltemp <- data.frame(DateTimeUTC = ltemp$DateTime, UTCOffset = ltemp$UTCOffset, SiteID = siteid, DataValue = ltemp$`Logger Temp`, VariableID = 1, CensorCode = "nc", MethodID = 10, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
wheight$DateTime <- format(wheight$DateTime, "%d.%m.%Y %H:%M")
dat_wheight <- data.frame(DateTimeUTC = wheight$DateTime, UTCOffset = wheight$UTCOffset, SiteID = siteid, DataValue = wheight$`Water Height`, VariableID = 5, CensorCode = "nc", MethodID = 8, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
# Water Temperature
files <- list.files(paste("02_Daten formatiert/04_Wasser-Sensortemperatur (TruTrack)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_wtemp, paste("02_Daten formatiert/04_Wasser-Sensortemperatur (TruTrack)/", name, "/", index+1, "_", name, "_Watertemp_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Logger Temperature
files <- list.files(paste("02_Daten formatiert/05_Loggertemperatur (TruTrack)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_ltemp, paste("02_Daten formatiert/05_Loggertemperatur (TruTrack)/", name, "/", index+1, "_", name, "_Loggertemp_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Water Height
files <- list.files(paste("02_Daten formatiert/10_Wasserstand (TruTrack)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_wheight, paste("02_Daten formatiert/10_Wasserstand (TruTrack)/", name, "/", index+1, "_", name, "_Waterheight_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
## Clean Workspace
rm(wtemp, ltemp, wheight, dat_wtemp, dat_ltemp, dat_wheight)
}
}
data <- list.files(paste("01_Rohdaten", ordner, sep = "/"))
data <- data[!grepl(".hobo", data)]
data
data<-data[-1]
data
for(i in data){
### Define SiteIDs
IDs <- c(Butschenberg = 33, Grundigklinik = 37, Hundseck = 16, Schafhof = 21, Schönbrunn = 1, Schwabenquelle = 7, Sportplatz = 37, Sternenberg = 36, Winterberg = 35)
if(grepl(".csv", i)){ ### ".csv" are Hobo Data (Casesensitive, Gauge data are .CSV)
#### HOBO ####
### Read file
dat <- read.csv(paste("01_Rohdaten", ordner, i, sep = "/"), sep = ",", skip = 1, row.names = 1)
### Rename columns
names(dat) <- c("DateTime", "Temperatur", "Niederschlag")
### Convert DateTime to POSIXct UTC
dat$DateTime <- as.POSIXct(dat$DateTime, format = "%d/%m/%y %H:%M:%S", tz = "UTC")
### Create/Calculate UTCOffset
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
### Seperate Temperature and Precipitation data
temp <- dat[!is.na(dat$Temperatur),c(1,2,5)]
### Round to minute values
temp$DateTime <- round(temp$DateTime, "mins")
### Round to next half-hourly values (if not already)
if(substr(temp$DateTime[1], 15, 16) != "00" | substr(temp$DateTime[1], 15, 16) != "30"){
temp$DateTime <- align.time(temp$DateTime, 30 * 60)
}
ns <- dat[!is.na(dat$Niederschlag),c(1,3,5)]
### Round to minute values
ns$DateTime <- round(ns$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(ns$DateTime[1], 16, 16) != "5" | substr(ns$DateTime[1], 16, 16) != "0"){
ns$DateTime <- align.time(ns$DateTime, 5 * 60)
}
### Find SiteID
siteid <- IDs[substr(i, 1, nchar(i)-4)]
### Create Output data.frame
temp$DateTime <- format(temp$DateTime, "%d.%m.%Y %H:%M")
dat_temp <- data.frame(DateTimeUTC = temp$DateTime, UTCOffset = temp$UTCOffset, SiteID = siteid, DataValue = temp$Temperatur, VariableID = 1, CensorCode = "nc", MethodID = 5, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
ns$DateTime <- format(ns$DateTime, "%d.%m.%Y %H:%M")
dat_ns <- data.frame(DateTimeUTC = ns$DateTime, UTCOffset = ns$UTCOffset, SiteID = siteid, DataValue = ns$Niederschlag, VariableID = 3, CensorCode = "nc", MethodID = 3, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
# List all already existing/formatted files for that site
files_temp <- list.files(paste("02_Daten formatiert/02_Lufttemperatur (Hobo)", substr(i, 1, nchar(i)-4), sep = "/"))
# Exclude the additional info files (eg. MissingValues)
files_temp <- files_temp[!grepl("\\(", files_temp)]
# Find index number of latest file
index <- as.numeric(gsub( "_.*$", "", files_temp[length(files_temp)]))
# Write File (index+1)
write.table(dat_temp, paste("02_Daten formatiert/02_Lufttemperatur (Hobo)/", substr(i, 1, nchar(i)-4), "/", index+1, "_Temp_", substr(i, 1, nchar(i)-4), "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Analogous to temperature
files_ns <- list.files(paste("02_Daten formatiert/01_Niederschlag (Hobo)", substr(i, 1, nchar(i)-4), sep = "/"))
files_ns <- files_ns[!grepl("\\(", files_ns)]
index <- as.numeric(gsub( "_.*$", "", files_ns[length(files_ns)]))
write.table(dat_ns, paste("02_Daten formatiert/01_Niederschlag (Hobo)/", substr(i, 1, nchar(i)-4), "/", index+1, "_NS_", substr(i, 1, nchar(i)-4), "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
## Clean Workspace
rm(temp, ns, dat_temp, dat_ns, files_temp, files_ns)
### End Hobo
} else if(grepl(".CSV", i)){
#### Pegel ####
if(grepl("0001", i)){
#### Wasserstand ####
dat <- read.csv(paste("01_Rohdaten", ordner, i, sep = "/"), sep = ";", header = F, stringsAsFactors = F)
dat$DateTime <- paste(dat$V1, dat$V2, sep = " ")
dat$DateTime <- as.POSIXct(dat$DateTime, format = "%d.%m.%Y %H:%M", tz = "UTC")
### Create/Calculate UTCOffset
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
### Round to minute values
dat$DateTime <- round(dat$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(dat$DateTime[1], 16, 16) != "5" | substr(dat$DateTime[1], 16, 16) != "0"){
dat$DateTime <- align.time(dat$DateTime, 5 * 60)
}
### Find SiteID
siteid <- ifelse(grepl("303451", i), 2, ifelse(grepl("303452", i), 6, 3))
name <- ifelse(grepl("303451", i), "Bühlot nach Rotwässerle", ifelse(grepl("303452", i), "Schwabenbrünnele", "Büchelbach"))
### Create Output data.frame
dat$DateTime <- format(dat$DateTime, "%d.%m.%Y %H:%M")
dat_out <- data.frame(DateTimeUTC = dat$DateTime, UTCOffset = dat$UTCOffset, SiteID = siteid, DataValue = dat$V3, VariableID = 6, CensorCode = "nc", MethodID = 7, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
files <- list.files(paste("02_Daten formatiert/09_Wasserstand (Pegel OTT 0001)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_out, paste("02_Daten formatiert/09_Wasserstand (Pegel OTT 0001)/", name, "/", index+1, "_Pegel_", name, "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
} else if(grepl("0002", i)){
#### Wassertemperatur ####
dat <- read.csv(paste("01_Rohdaten", ordner, i, sep = "/"), sep = ";", header = F, stringsAsFactors = F)
dat$DateTime <- paste(dat$V1, dat$V2, sep = " ")
dat$DateTime <- as.POSIXct(dat$DateTime, format = "%d.%m.%Y %H:%M", tz = "UTC")
### Create/Calculate UTCOffset
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
### Round to minute values
dat$DateTime <- round(dat$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(dat$DateTime[1], 16, 16) != "5" | substr(dat$DateTime[1], 16, 16) != "0"){
dat$DateTime <- align.time(dat$DateTime, 5 * 60)
}
### Find SiteID
siteid <- ifelse(grepl("303451", i), 2, ifelse(grepl("303452", i), 6, 3))
name <- ifelse(grepl("303451", i), "Bühlot nach Rotwässerle", ifelse(grepl("303452", i), "Schwabenbrünnele", "Büchelbach"))
### Create Output data.frame
dat$DateTime <- format(dat$DateTime, "%d.%m.%Y %H:%M")
dat_out <- data.frame(DateTimeUTC = dat$DateTime, UTCOffset = dat$UTCOffset, SiteID = siteid, DataValue = dat$V3, VariableID = 1, CensorCode = "nc", MethodID = 9, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
files <- list.files(paste("02_Daten formatiert/03_Wassertemperatur (Pegel OTT 0002)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_out, paste("02_Daten formatiert/03_Wassertemperatur (Pegel OTT 0002)/", name, "/", index+1, "_Pegel_", name, "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
} else if(grepl("0004", i)){
#### Leitfähigkeit ####
dat <- read.csv(paste("01_Rohdaten", ordner, i, sep = "/"), sep = ";", header = F, stringsAsFactors = F)
dat$DateTime <- paste(dat$V1, dat$V2, sep = " ")
dat$DateTime <- as.POSIXct(dat$DateTime, format = "%d.%m.%Y %H:%M", tz = "UTC")
### Create/Calculate UTCOffset
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
### Round to minute values
dat$DateTime <- round(dat$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(dat$DateTime[1], 16, 16) != "5" | substr(dat$DateTime[1], 16, 16) != "0"){
dat$DateTime <- align.time(dat$DateTime, 5 * 60)
}
### Find SiteID
siteid <- ifelse(grepl("303451", i), 2, ifelse(grepl("303452", i), 6, 3))
name <- ifelse(grepl("303451", i), "Bühlot nach Rotwässerle", ifelse(grepl("303452", i), "Schwabenbrünnele", "Büchelbach"))
### Create Output data.frame
dat$DateTime <- format(dat$DateTime, "%d.%m.%Y %H:%M")
dat_out <- data.frame(DateTimeUTC = dat$DateTime, UTCOffset = dat$UTCOffset, SiteID = siteid, DataValue = dat$V3, VariableID = 4, CensorCode = "nc", MethodID = 11, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
files <- list.files(paste("02_Daten formatiert/08_Wasser Leitfähigkeit (Pegel OTT 0004)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_out, paste("02_Daten formatiert/08_Wasser Leitfähigkeit (Pegel OTT 0004)/", name, "/", index+1, "_Pegel_", name, "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
## Clean Workspace
rm(dat_out)
}
} else if(grepl(".dat", i)){ # .dat files are soil moisture data
#### Bodenfeuchte Campbell ####
### Read file
dat <- read.table(paste("01_Rohdaten", ordner, i, sep = "/"), sep = ",", skip = 4)
if(grepl("Table2", i)){
dat <- dat[,-c(2,3)] # Delete Column 2 "RECORD" and 3 "Battery"
}else{
dat <- dat[,-2] # Delete Column 2 "RECORD"
}
### Rename columns
names(dat) <- c("DateTime", "VolumeWaterContent", "ElectricConductivity", "Temperature")
### Convert DateTime to POSIXct UTC
dat$DateTime <- as.POSIXct(dat$DateTime, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
### Create/Calculate UTCOffset
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
### Seperate VolumeWaterContent/ElectricCOnductivity and Temperature data
vwc <- dat[!is.na(dat$VolumeWaterContent),c(1,2,6)]
### Round to minute values
vwc$DateTime <- round(vwc$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(vwc$DateTime[1], 16, 16) != "5" | substr(vwc$DateTime[1], 16, 16) != "0"){
vwc$DateTime <- align.time(vwc$DateTime, 5 * 60)
}
ec <- dat[!is.na(dat$ElectricConductivity),c(1,3,6)]
### Round to minute values
ec$DateTime <- round(ec$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(ec$DateTime[1], 16, 16) != "5" | substr(ec$DateTime[1], 16, 16) != "0"){
ec$DateTime <- align.time(ec$DateTime, 5 * 60)
}
temp <- dat[!is.na(dat$Temperature),c(1,4,6)]
### Round to minute values
temp$DateTime <- round(temp$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(temp$DateTime[1], 16, 16) != "5" | substr(temp$DateTime[1], 16, 16) != "0"){
temp$DateTime <- align.time(temp$DateTime, 5 * 60)
}
### Find SiteID
siteid <- ifelse(grepl("1_Table1", i), 22, ifelse(grepl("1_Table2", i), 23, ifelse(grepl("5_Table1", i), 28, 29)))
name <- ifelse(grepl("1_Table1", i), "Schafhof 1 oben Sensor 1 20cm", ifelse(grepl("1_Table2", i), "Schafhof 1 oben Sensor 2 50cm", ifelse(grepl("5_Table1", i), "Schafhof 5 unten Sensor 1 20cm", "Schafhof 5 unten Sensor 2 50cm")))
filename <- ifelse(grepl("1_Table1", i), "Schafhof1_oben_01", ifelse(grepl("1_Table2", i), "Schafhof1_oben_02", ifelse(grepl("5_Table1", i), "Schafhof5_unten_01", "Schafhof5_unten_02")))
### Create Output data.frame
vwc$DateTime <- format(vwc$DateTime, "%d.%m.%Y %H:%M")
dat_vwc <- data.frame(DateTimeUTC = vwc$DateTime, UTCOffset = vwc$UTCOffset, SiteID = siteid, DataValue = vwc$VolumeWaterContent, VariableID = 2, CensorCode = "nc", MethodID = 6, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
ec$DateTime <- format(ec$DateTime, "%d.%m.%Y %H:%M")
dat_ec <- data.frame(DateTimeUTC = ec$DateTime, UTCOffset = ec$UTCOffset, SiteID = siteid, DataValue = ec$ElectricConductivity, VariableID = 2, CensorCode = "nc", MethodID = 6, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
temp$DateTime <- format(temp$DateTime, "%d.%m.%Y %H:%M")
dat_temp <- data.frame(DateTimeUTC = temp$DateTime, UTCOffset = temp$UTCOffset, SiteID = siteid, DataValue = temp$Temperature, VariableID = 2, CensorCode = "nc", MethodID = 6, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
# Volume Water Content
files <- list.files(paste("02_Daten formatiert/06_Volum. Wassergehalt (Bodenfeuchte Campell)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_vwc, paste("02_Daten formatiert/06_Volum. Wassergehalt (Bodenfeuchte Campell)/", name, "/", index+1, "_Vol-Wasser_", filename, "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Electric Conductivity
files <- list.files(paste("02_Daten formatiert/07_El-Leitfähigkeit (Bodenfeuchte Campell)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_ec, paste("02_Daten formatiert/07_El-Leitfähigkeit (Bodenfeuchte Campell)/", name, "/", index+1, "_El-Leit_", filename, "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Temperature
files <- list.files(paste("02_Daten formatiert/11_Temperatur (Bodenfeuchte Campell)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_temp, paste("02_Daten formatiert/11_Temperatur (Bodenfeuchte Campell)/", name, "/", index+1, "_Temp_", filename, "_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
## Clean Workspace
rm(vwc, ec, temp, dat_vwc, dat_ec, dat_temp, filename)
} else if(grepl(".xlsx", i)){ # .xlsx files are TruTrack data
#### TruTrack ####
### Read file
dat <- read_xlsx(paste("01_Rohdaten", ordner, i, sep = "/"), skip = 12, col_names = c("#", "DateTime", "Water Temp", "Logger Temp", "Water Height"))
dat <- dat[,-1] # Delete Column 1 "Sample Number"
### Create/Calculate UTCOffset
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
### Seperate Temperatures and Waterlevel data
wtemp <- dat[!is.na(dat$`Water Temp`),c(1,2,6)]
### Round to minute values
wtemp$DateTime <- round(wtemp$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(wtemp$DateTime[1], 16, 16) != "5" | substr(wtemp$DateTime[1], 16, 16) != "0"){
wtemp$DateTime <- align.time(wtemp$DateTime, 5 * 60)
}
ltemp <- dat[!is.na(dat$`Logger Temp`),c(1,3,6)]
### Round to minute values
ltemp$DateTime <- round(ltemp$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(ltemp$DateTime[1], 16, 16) != "5" | substr(ltemp$DateTime[1], 16, 16) != "0"){
ltemp$DateTime <- align.time(ltemp$DateTime, 5 * 60)
}
wheight <- dat[!is.na(dat$`Logger Temp`),c(1,4,6)]
### Round to minute values
wheight$DateTime <- round(wheight$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(wheight$DateTime[1], 16, 16) != "5" | substr(wheight$DateTime[1], 16, 16) != "0"){
wheight$DateTime <- align.time(wheight$DateTime, 5 * 60)
}
### Find SiteID
siteid <- ifelse(grepl(trutracks[1], i), 11, ifelse(grepl(trutracks[2], i), 12, ifelse(grepl(trutracks[3], i), 13, ifelse(grepl(trutracks[4], i), 14, 31))))
name <- ifelse(grepl(trutracks[1], i), "Oben Nord", ifelse(grepl(trutracks[2], i), "Oben Süd", ifelse(grepl(trutracks[3], i), "Unten Nord", ifelse(grepl(trutracks[4], i), "Unten Süd", "Schafhof Tensiometer"))))
### Convert meassured data (water level from TruTrack Bottom) to actual data (Water level to Ground level)
if(name == "Oben Nord"){
wheight$`Water Height`[wheight$`Water Height` <= -28] <- -9999  # Zero-Value -55
wheight$`Water Height`[wheight$`Water Height` > -28] <- (-2255 + wheight$`Water Height`[wheight$`Water Height` > -28]) / 10
}else if(name == "Oben Süd"){
wheight$`Water Height`[wheight$`Water Height` <= -39] <- -9999  # Zero-Value -55
wheight$`Water Height`[wheight$`Water Height` > -39] <- (-2095 + wheight$`Water Height`[wheight$`Water Height` > -39]) / 10
}else if(name == "Unten Nord"){
wheight$`Water Height`[wheight$`Water Height` <= -55] <- -9999  # Zero-Value -55
wheight$`Water Height`[wheight$`Water Height` > -55] <- (-1845 + wheight$`Water Height`[wheight$`Water Height` > -55]) / 10
}else if(name == "Unten Süd"){
wheight$`Water Height`[wheight$`Water Height` <= -34] <- -9999  # Zero-Value -55
wheight$`Water Height`[wheight$`Water Height` > -34] <- (-1935 + wheight$`Water Height`[wheight$`Water Height` > -34]) / 10
}else{
wheight$`Water Height`[wheight$`Water Height` <= -34] <- -9999  # Zero-Value -55
wheight$`Water Height`[wheight$`Water Height` > -34] <- (-2105 + wheight$`Water Height`[wheight$`Water Height` > -34]) / 10
}
### Create Output data.frame
wtemp$DateTime <- format(wtemp$DateTime, "%d.%m.%Y %H:%M")
dat_wtemp <- data.frame(DateTimeUTC = wtemp$DateTime, UTCOffset = wtemp$UTCOffset, SiteID = siteid, DataValue = wtemp$`Water Temp`, VariableID = 1, CensorCode = "nc", MethodID = 10, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
ltemp$DateTime <- format(ltemp$DateTime, "%d.%m.%Y %H:%M")
dat_ltemp <- data.frame(DateTimeUTC = ltemp$DateTime, UTCOffset = ltemp$UTCOffset, SiteID = siteid, DataValue = ltemp$`Logger Temp`, VariableID = 1, CensorCode = "nc", MethodID = 10, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
wheight$DateTime <- format(wheight$DateTime, "%d.%m.%Y %H:%M")
dat_wheight <- data.frame(DateTimeUTC = wheight$DateTime, UTCOffset = wheight$UTCOffset, SiteID = siteid, DataValue = wheight$`Water Height`, VariableID = 5, CensorCode = "nc", MethodID = 8, SourceID = 1, QualityControllevelID = 1, stringsAsFactors = F)
### Write Output files
# Water Temperature
files <- list.files(paste("02_Daten formatiert/04_Wasser-Sensortemperatur (TruTrack)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_wtemp, paste("02_Daten formatiert/04_Wasser-Sensortemperatur (TruTrack)/", name, "/", index+1, "_", name, "_Watertemp_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Logger Temperature
files <- list.files(paste("02_Daten formatiert/05_Loggertemperatur (TruTrack)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_ltemp, paste("02_Daten formatiert/05_Loggertemperatur (TruTrack)/", name, "/", index+1, "_", name, "_Loggertemp_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
# Water Height
files <- list.files(paste("02_Daten formatiert/10_Wasserstand (TruTrack)", name, sep = "/"))
files <- files[!grepl("\\(", files)]
index <- as.numeric(gsub( "_.*$", "", files[length(files)]))
write.table(dat_wheight, paste("02_Daten formatiert/10_Wasserstand (TruTrack)/", name, "/", index+1, "_", name, "_Waterheight_", datum, ".txt", sep = ""), quote = F, row.names = F, sep = "\t")
## Clean Workspace
rm(wtemp, ltemp, wheight, dat_wtemp, dat_ltemp, dat_wheight)
}
}
library(data.table)
library(dplyr)
library(openair)
library(rlist)
install.packages("rlist")
library(rlist)
library(data.table)
library(xlsx)
install.packages(c("data.table", "dplyr", "openair", "xlsx"))
install.packages(c("data.table", "dplyr", "openair", "xlsx"))
library(rlist)
library(xts)
library(readxl)
library(data.table)
setwd("R:/hiwi/Jannick")
seq2 <- Vectorize(seq.default, vectorize.args = c("from", "to"))
proj_wd <- getwd()
datum <- "06-10-17"
# Folder name of raw data
ordner <- "30-06_10_17x"
# Folder for the final checked files
plaus_folder <- "R:/hiwi/Jannick/04_Database ready/"
dir.create(paste(plaus_folder, datum, sep = "/"))
trutracks <- c("1207285", "1207298", "1207281", "1207299") ### TruTrack IDs at Oben Nord, Oben S?d, Unten S?d, Schafhof
raw.data <- list.files(paste("01_Rohdaten", ordner, sep = "/"))
raw.data <- raw.data[!grepl(".hobo", raw.data)]
raw.data <- raw.data[-1]
dat <- read_xlsx(paste("01_Rohdaten", ordner, i, sep = "/"), skip = 12, col_names = c("#", "DateTime", "Water Temp", "Logger Temp", "Water Height"))
library(readxl)
dat <- read_xlsx(paste("01_Rohdaten", ordner, i, sep = "/"), skip = 12, col_names = c("#", "DateTime", "Water Temp", "Logger Temp", "Water Height"))
dat <- read_excel(paste("01_Rohdaten", ordner, i, sep = "/"), skip = 12, col_names = c("#", "DateTime", "Water Temp", "Logger Temp", "Water Height"))
i <- 1
dat <- read_excel(paste("01_Rohdaten", ordner, i, sep = "/"), skip = 12, col_names = c("#", "DateTime", "Water Temp", "Logger Temp", "Water Height"))
i <- raw.data[1]
dat <- read_excel(paste("01_Rohdaten", ordner, i, sep = "/"), skip = 12, col_names = c("#", "DateTime", "Water Temp", "Logger Temp", "Water Height"))
dat <- dat[,-1] # Delete Column 1 "Sample Number"
dat$LocalTime <- as.POSIXct(format(dat$DateTime, tz = "Europe/Berlin"))
dat$UTCOffset <- as.numeric(substr(dat$LocalTime, 12, 13)) - as.numeric(substr(dat$DateTime, 12, 13))
dat$UTCOffset[dat$UTCOffset == -22] <- 2
dat$UTCOffset[dat$UTCOffset == -23] <- 1
wtemp <- dat[!is.na(dat$`Water Temp`),c(1,2,6)]
### Round to minute values
wtemp$DateTime <- round(wtemp$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(wtemp$DateTime[1], 16, 16) != "5" | substr(wtemp$DateTime[1], 16, 16) != "0"){
wtemp$DateTime <- align.time(wtemp$DateTime, 5 * 60)
}
ltemp <- dat[!is.na(dat$`Logger Temp`),c(1,3,6)]
### Round to minute values
ltemp$DateTime <- round(ltemp$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(ltemp$DateTime[1], 16, 16) != "5" | substr(ltemp$DateTime[1], 16, 16) != "0"){
ltemp$DateTime <- align.time(ltemp$DateTime, 5 * 60)
}
wheight <- dat[!is.na(dat$`Logger Temp`),c(1,4,6)]
### Round to minute values
wheight$DateTime <- round(wheight$DateTime, "mins")
### Round to next 5 minute values (if not already)
if(substr(wheight$DateTime[1], 16, 16) != "5" | substr(wheight$DateTime[1], 16, 16) != "0"){
wheight$DateTime <- align.time(wheight$DateTime, 5 * 60)
}
### Find SiteID
siteid <- ifelse(grepl(trutracks[1], i), 11, ifelse(grepl(trutracks[2], i), 12, ifelse(grepl(trutracks[3], i), 14, 31)))
name <- ifelse(grepl(trutracks[1], i), "Oben Nord", ifelse(grepl(trutracks[2], i), "Oben Süd", ifelse(grepl(trutracks[3], i), "Unten Süd", "Schafhof Tensiometer")))
### Convert meassured data (water level from TruTrack Bottom) to actual data (Water level to Ground level)
if(name == "Oben Nord"){
wheight$`Water Height`[wheight$`Water Height` <= -28] <- -9999  # Zero-Value -28
wheight$`Water Height`[wheight$`Water Height` > -28] <- (-2255 + wheight$`Water Height`[wheight$`Water Height` > -28]) / 10
}else if(name == "Oben Süd"){
wheight$`Water Height`[wheight$`Water Height` <= -39] <- -9999  # Zero-Value -39
wheight$`Water Height`[wheight$`Water Height` > -39] <- (-2095 + wheight$`Water Height`[wheight$`Water Height` > -39]) / 10
}else if(name == "Unten Süd"){
wheight$`Water Height`[wheight$`Water Height` <= -34] <- -9999  # Zero-Value -34
wheight$`Water Height`[wheight$`Water Height` > -34] <- (-1935 + wheight$`Water Height`[wheight$`Water Height` > -34]) / 10
}else{
wheight$`Water Height`[wheight$`Water Height` <= -34] <- -9999  # Zero-Value -34
wheight$`Water Height`[wheight$`Water Height` > -34] <- (-2105 + wheight$`Water Height`[wheight$`Water Height` > -34]) / 10
}
data <- data.frame(DateTimeUTC = wheight$DateTime, DataValue = wheight$`Water Height`, Warning = NA)
table(data$DataValue)
x <- round(data$DataValue, 1)
table(x)
x <- which(sequence(rle(x)$lengths) > 72)
x <- round(data$DataValue, 1)
x[x == -9999] <- NA
table(x)
x <- which(sequence(rle(x)$lengths) > 72)
getwd()
setwd("R:/hiwi/Jannick/05_Datenbank")
raw.data <- list.files()
raw.data
raw.data <- raw.data[49:53]
data <- lapply(raw.data, read.table, header = T, sep = ",", dec = ".", skipNul = T, stringsAsFactors = F, row.names = NULL)
my_cols <- c("black", "blue", "green", "magenta", "yellow", "orange", "violet", "cyan", "grey50", "brown")
svg("trutracks.svg", width = 2000, height = 12)
for (i in seq(data)){
data[[i]]$DateTimeUTC <- as.POSIXct(data[[i]]$DateTimeUTC, format = "%d.%m.%Y %H:%M", tz = "UTC")
if(i == 1){
plot(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i], xaxt = "n")
axis.POSIXct(side = 1, at = seq(data[[i]]$DateTimeUTC[1], data[[i]]$DateTimeUTC[length(data[[i]]$DateTimeUTC)], by = "month"), format = "%m.%Y")
} else{
lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(0,20), col = my_cols[i])
}
if(class(data[[i]]$Warning) == "logical"){
data[[i]]$DataValue[is.na(data[[i]]$Warning)] <- NA
} else{
data[[i]]$DataValue[data[[i]]$Warning == ""] <- NA
}
lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", lwd = 1, ylim = c(0,20), col = "red")
}
dev.off()
for (i in seq(data)){
data[[i]]$DateTimeUTC <- as.POSIXct(data[[i]]$DateTimeUTC, format = "%d.%m.%Y %H:%M", tz = "UTC")
if(i == 1){
plot(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i], xaxt = "n")
axis.POSIXct(side = 1, at = seq(data[[i]]$DateTimeUTC[1], data[[i]]$DateTimeUTC[length(data[[i]]$DateTimeUTC)], by = "month"), format = "%m.%Y")
} else{
lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i])
}
#if(class(data[[i]]$Warning) == "logical"){
# data[[i]]$DataValue[is.na(data[[i]]$Warning)] <- NA
#} else{
#  data[[i]]$DataValue[data[[i]]$Warning == ""] <- NA
#}
#lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", lwd = 1, ylim = c(0,20), col = "red")
}
dev.off()
dev.off()
svg("trutracks.svg", width = 2000, height = 12)
for (i in seq(data)){
data[[i]]$DateTimeUTC <- as.POSIXct(data[[i]]$DateTimeUTC, format = "%d.%m.%Y %H:%M", tz = "UTC")
if(i == 1){
plot(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i], xaxt = "n")
axis.POSIXct(side = 1, at = seq(data[[i]]$DateTimeUTC[1], data[[i]]$DateTimeUTC[length(data[[i]]$DateTimeUTC)], by = "month"), format = "%m.%Y")
} else{
lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i])
}
#if(class(data[[i]]$Warning) == "logical"){
# data[[i]]$DataValue[is.na(data[[i]]$Warning)] <- NA
#} else{
#  data[[i]]$DataValue[data[[i]]$Warning == ""] <- NA
#}
#lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", lwd = 1, ylim = c(0,20), col = "red")
}
dev.off()
data <- lapply(raw.data, read.table, header = T, sep = ",", dec = ".", skipNul = T, stringsAsFactors = F, row.names = NULL)
svg("trutracks.svg", width = 2000, height = 12)
for (i in seq(data)){
data[[i]]$DateTimeUTC <- as.POSIXct(data[[i]]$DateTimeUTC, format = "%d.%m.%Y %H:%M", tz = "UTC")
if(i == 1){
plot(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i], xaxt = "n")
axis.POSIXct(side = 1, at = seq(data[[i]]$DateTimeUTC[1], data[[i]]$DateTimeUTC[length(data[[i]]$DateTimeUTC)], by = "month"), format = "%m.%Y")
} else{
lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-250,0), col = my_cols[i])
}
#if(class(data[[i]]$Warning) == "logical"){
# data[[i]]$DataValue[is.na(data[[i]]$Warning)] <- NA
#} else{
#  data[[i]]$DataValue[data[[i]]$Warning == ""] <- NA
#}
#lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", lwd = 1, ylim = c(0,20), col = "red")
}
dev.off()
table(data[[1]]$DataValue)
raw.data
table(data[[5]]$DataValue)
data <- lapply(raw.data, read.table, header = T, sep = ",", dec = ".", skipNul = T, stringsAsFactors = F, row.names = NULL)
svg("trutracks.svg", width = 2000, height = 12)
for (i in seq(data)){
data[[i]]$DateTimeUTC <- as.POSIXct(data[[i]]$DateTimeUTC, format = "%d.%m.%Y %H:%M", tz = "UTC")
if(i == 1){
plot(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-300,0), col = my_cols[i], xaxt = "n")
axis.POSIXct(side = 1, at = seq(data[[i]]$DateTimeUTC[1], data[[i]]$DateTimeUTC[length(data[[i]]$DateTimeUTC)], by = "month"), format = "%m.%Y")
} else{
lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", ylim = c(-300,0), col = my_cols[i])
}
#if(class(data[[i]]$Warning) == "logical"){
# data[[i]]$DataValue[is.na(data[[i]]$Warning)] <- NA
#} else{
#  data[[i]]$DataValue[data[[i]]$Warning == ""] <- NA
#}
#lines(data[[i]]$DateTimeUTC, data[[i]]$DataValue, type = "l", lwd = 1, ylim = c(0,20), col = "red")
abline(h = -200)
abline(h = -250)
abline(h = -150)
}
dev.off()
